from textual.widgets import Static
from textual.reactive import reactive
from textual import log


class SummaryWidget(Static):
    """
    A widget for displaying message summaries generated by Gemini.
    
    This widget shows a loading state while generating summaries and then
    displays the final summary with proper formatting.
    """
    
    summary_text = reactive("")
    is_loading = reactive(False)
    
    def __init__(self, **kwargs) -> None:
        super().__init__(**kwargs)
        self.styles.display = "none"  # Hidden by default
    
    def show_summary(self) -> None:
        """Show the summary widget"""
        log.info("SummaryWidget.show_summary() called")
        self.styles.display = "block"
        self.focus()
        log.info(f"SummaryWidget display style set to: {self.styles.display}")
    
    def hide_summary(self) -> None:
        """Hide the summary widget"""
        log.info("SummaryWidget.hide_summary() called")
        self.styles.display = "none"
        self.summary_text = ""
        self.is_loading = False
        log.info(f"SummaryWidget display style set to: {self.styles.display}")
    
    def set_loading(self, loading: bool = True) -> None:
        """Set the loading state"""
        self.is_loading = loading
        if loading:
            self.summary_text = "Generating summary..."
        self.refresh()
    
    def set_summary(self, summary: str) -> None:
        """Set the summary text"""
        self.summary_text = summary
        self.is_loading = False
        self.refresh()
    
    def render(self) -> str:
        """Render the summary content"""
        log.info(f"SummaryWidget.render() called - is_loading: {self.is_loading}, text: {self.summary_text}")
        
        if self.is_loading:
            return f"""
[bold blue]AI Summary[/bold blue]
[dim]â ‹ {self.summary_text}[/dim]
"""
        else:
            return f"""
[bold blue]AI Summary[/bold blue]
{self.summary_text}
"""
